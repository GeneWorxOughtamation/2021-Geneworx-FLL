#!/usr/bin/env pybricks-micropython

#Inches to milimeters.
def i2mm(Inches):
    mm =25.4*Inches
    return mm 

#Seconds to miliseconds.
def s2ms(Seconds):
    ms =1000*Seconds
    return ms 

"""
Example LEGO® MINDSTORMS® EV3 Robot Educator Driving Base Program
-----------------------------------------------------------------

This program requires LEGO® EV3 MicroPython v2.0.
Download: https://education.lego.com/en-us/support/mindstorms-ev3/python-for-ev3

Building instructions can be found at:
https://education.lego.com/en-us/support/mindstorms-ev3/building-instructions#robot
"""

from pybricks.hubs import EV3Brick
from pybricks.ev3devices import Motor, GyroSensor, ColorSensor 
from pybricks.parameters import Port, Direction, Color, ImageFile, SoundFile, Button
from pybricks.robotics import DriveBase
from pybricks.tools import wait 


# Initialize the EV3 Brick.
ev3 = EV3Brick()

# Initialize the motors and sensors.
left_motor = Motor(Port.B, Direction.COUNTERCLOCKWISE )
right_motor = Motor(Port.C, Direction.COUNTERCLOCKWISE )
right_gear = Motor(Port.A)
gyro = GyroSensor(Port.S4)
light = ColorSensor(Port.S3)

#Color sensor in port S4 

# Initialize the drive base.
robot = DriveBase(left_motor, right_motor, wheel_diameter=61.918, axle_track=115)

#Gyro function forwards and backwards.

gain = -3

#Forwards gyro function.
def drive_straight(Distance, Speed):


    #Gyro Sensor code. 

    gyro.reset_angle(0)

    #ev3.speaker.say("Drive Forward"+Distance+" inches at speed"+Speed)
    print(Distance, robot.distance())
    while robot.distance() <= Distance:
        correction = (0 - gyro.angle())*(gain)
        print(Distance, robot.distance(), correction)
        robot.drive(Speed,correction)
    robot.stop()
    left_motor.brake()
    right_motor.brake()
    ev3.speaker.beep()

#Backwards gyro function.
def drive_backward(Distance, speed):


    #Gyro Sensor code. 

    gyro.reset_angle(0)
    #
    #ev3.speaker.say("Drive backward", Distance, " inches at speed", Speed)
    print(Distance, robot.distance())
    while robot.distance() >= Distance:
        correction = (0 - gyro.angle())*(gain)
        print(Distance, robot.distance(), correction)
        robot.drive(speed,correction)
    robot.stop()
    left_motor.brake()
    right_motor.brake()
    ev3.speaker.beep()

#End of gyro function forwards, backwards.

#Program switcher.
#Movement code.
#Motor code.



yellow = (10, 6, 0) 

green = (5,13, 0)

black = (0, 1, 0)

white = (4, 9, 2)

red = (15, 1, 0)

blue = (0, 0, 2)

def green_function(code):
    if Button.CENTER in ev3.buttons.pressed():
        if light.rgb() == green:
            ev3.speaker.say("Green")
            code



while True:
    print(light.rgb())
    print(ev3.buttons.pressed())
    print(light.rgb())
    if Button.CENTER in ev3.buttons.pressed():
        if light.rgb() == green:
            ev3.speaker.say("Green")
            print(light.rgb())
            wait(s2ms(1))
            robot.reset()
            ev3.screen.load_image(ImageFile.RIGHT)
            ev3.screen.print(light.rgb())
            ev3.speaker.play_notes(['A4/4/8', 'G4/4/8', 'G4/4/2', 'G4/4/8', 'B4/4/8','D4/4/8','G4/4/8'])
            drive_straight(i2mm(20), i2mm(7))
            right_gear.run_target(90/0.5,-240,wait=True)
            right_gear.run_target(90/0.5,180,wait=True)
            robot.reset()
            drive_backward(i2mm(-20), i2mm(-7))
            wait(s2ms(2))
    if Button.CENTER in ev3.buttons.pressed():
        if light.rgb() == red:
            ev3.speaker.say("Red")
            robot.reset()
            ev3.speaker.say("Turning 360 degrees")
            robot.turn(360)
            wait(s2ms(2))
    if Button.CENTER in ev3.buttons.pressed():
        if light.rgb() == blue:
            ev3.speaker.say("Blue")
            drive_straight(i2mm(3), i2mm(7))
            robot.reset()
            drive_backward(i2mm(-3), i2mm(-7))
            wait(s2ms(2))
    if Button.CENTER in ev3.buttons.pressed():
        if light.rgb() == black:
            ev3.speaker.say("Black")
            ev3.speaker.say("Moving forward 5 inches")
            robot.reset()
            drive_straight(i2mm(5), i2mm(7))
            ev3.speaker.say("Moving backward 5 inches")
            robot.reset()
            drive_backward(i2mm(-5), i2mm(-7))
            ev3.speaker.say("Moving forward 3 inches and turning 79 degrees")
            robot.reset()
            drive_straight(i2mm(3), i2mm(7))
            robot.turn(79)
            ev3.speaker.say("Turning 360 degrees")
            robot.turn(360)
            ev3.speaker.say("Move backward 3 inches")
            robot.reset()
            drive_backward(i2mm(-3), i2mm(-7))
            ev3.speaker.say("Turning negative 79 degrees")
            robot.turn(-79)
            wait(s2ms(2))       
ev3.speaker.beep()